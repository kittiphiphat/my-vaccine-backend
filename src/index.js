'use strict';

const http = require('http');
const { Server } = require('socket.io');

module.exports = {
  register(/*{ strapi }*/) {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô register plugin ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ
  },

  bootstrap({ strapi }) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP server ‡πÅ‡∏¢‡∏Å ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Socket.IO
    const socketServer = http.createServer();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Socket.IO ‡∏ö‡∏ô server ‡∏ô‡∏±‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS
    const io = new Server(socketServer, {
      cors: {
        origin: 'http://localhost:3000',
        credentials: true,
      },
    });

    // ‡πÄ‡∏Å‡πá‡∏ö instance io ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô strapi ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    strapi.io = io;

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    io.on('connection', (socket) => {
      console.log('üöÄ Socket connected:', socket.id);

      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á event ‡∏ü‡∏±‡∏á‡∏à‡∏≤‡∏Å client
      socket.on('message', (data) => {
        console.log('Received message from client:', data);
        socket.emit('reply', `Server received: ${data}`);
      });

      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ client ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      socket.on('disconnect', () => {
        console.log('Socket disconnected:', socket.id);
      });
    });

    // ‡πÉ‡∏´‡πâ Socket.IO server ‡∏ü‡∏±‡∏á‡∏ö‡∏ô port 4000
    const port = 4000;
    socketServer.listen(port, () => {
      console.log(`üöÄ Socket.IO running on http://localhost:${port}`);
    });

    // ‡∏ï‡∏±‡πâ‡∏á CRON JOB - ‡∏•‡∏ö log ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
    strapi.cron.add({
      '0 0 1 * *': async () => {
        const now = new Date();
        const sixMonthsAgo = new Date();
        sixMonthsAgo.setMonth(now.getMonth() - 6);

        try {
          // ‡∏•‡∏ö patient-log ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          await strapi.db.query('api::patient-log.patient-log').deleteMany({
            where: { timestamp: { $lt: sixMonthsAgo.toISOString() } },
          });

          // ‡∏•‡∏ö admin-log ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          await strapi.db.query('api::admin-log.admin-log').deleteMany({
            where: { timestamp: { $lt: sixMonthsAgo.toISOString() } },
          });

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏ patient
          const patients = await strapi.db.query('api::patient.patient').findMany({
            select: ['id', 'birthdate', 'age'],
          });

          const updatedPatients = [];

          for (const patient of patients) {
            const birthDate = new Date(patient.birthdate);
            const ageDiff = now.getFullYear() - birthDate.getFullYear();
            const hasBirthdayPassed =
              now.getMonth() > birthDate.getMonth() ||
              (now.getMonth() === birthDate.getMonth() && now.getDate() >= birthDate.getDate());

            const newAge = hasBirthdayPassed ? ageDiff : ageDiff - 1;

            if (newAge !== patient.age) {
              updatedPatients.push({ id: patient.id, age: newAge });
            }
          }

          for (const update of updatedPatients) {
            await strapi.db.query('api::patient.patient').update({
              where: { id: update.id },
              data: { age: update.age },
            });
          }

          // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏£‡∏∞‡∏ö‡∏ö
          await strapi.db.query('api::admin-log.admin-log').create({
            data: {
              message: `‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö log ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏ ${updatedPatients.length} ‡∏Ñ‡∏ô`,
              type: 'system',
              timestamp: new Date().toISOString(),
            },
          });

          strapi.log.info(`[CRON] ‡∏•‡∏ö log ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏¢‡∏∏ ${updatedPatients.length} ‡∏£‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } catch (error) {
          strapi.log.error('‚ùå CRON ERROR:', error);
        }
      },
    });
  },
};
